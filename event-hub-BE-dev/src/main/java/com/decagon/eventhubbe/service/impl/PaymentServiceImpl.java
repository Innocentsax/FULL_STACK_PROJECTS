package com.decagon.eventhubbe.service.impl;import com.decagon.eventhubbe.domain.entities.*;import com.decagon.eventhubbe.domain.repository.*;import com.decagon.eventhubbe.dto.request.PaymentRequest;import com.decagon.eventhubbe.dto.response.EventTicketResponse;import com.decagon.eventhubbe.dto.response.Response;import com.decagon.eventhubbe.exception.AccountNotFoundException;import com.decagon.eventhubbe.exception.EventNotFoundException;import com.decagon.eventhubbe.service.PaymentService;import com.decagon.eventhubbe.utils.DateUtils;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.http.*;import org.springframework.stereotype.Service;import org.springframework.util.LinkedMultiValueMap;import org.springframework.util.MultiValueMap;import org.springframework.web.client.RestTemplate;import java.math.BigDecimal;import java.time.LocalDateTime;import java.util.List;import static com.decagon.eventhubbe.utils.PaymentUtils.getSecretKey;@Service@Slf4j@RequiredArgsConstructorpublic class PaymentServiceImpl implements PaymentService {    private final EventRepository eventRepository;    private final AccountRepository accountRepository;    private final AppUserServiceImpl appUserService;    private final PaymentRepository paymentRepository;    private final EventTicketRepository eventTicketRepository;    private final HttpHeaders headers;    private final RestTemplate restTemplate;    @Override    public String makePayment(PaymentRequest paymentDTO,String id) {        Event event = eventRepository.findById(id).orElseThrow(()-> new RuntimeException("USER NOT FOUND"));        AppUser user = appUserService.getUserByEmail(event.getAppUser().getEmail());        System.out.println(user.getId());        log.info("user {}", user.getEmail());        Account account = accountRepository.findByAppUser(user).orElseThrow(()-> new AccountNotFoundException("USER DOES NOT HAVE AN ACCOUNT"));        Double totalPrice = 0.0;                List<EventTicketResponse> eventTicketResponseList = paymentDTO.getEventTicketList();        for(EventTicketResponse eventTicketResponse : eventTicketResponseList){            totalPrice+=eventTicketResponse.getQuantity()*eventTicketResponse.getTicketPrice();        }        String url = "https://api.paystack.co/transaction/initialize";        MultiValueMap<String, String> body = new LinkedMultiValueMap<>();        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);        headers.setBearerAuth(getSecretKey());        headers.setCacheControl("no-cache");        HttpEntity<MultiValueMap<String, String>> httpEntity = new HttpEntity<>(body, headers);        body.add("email", paymentDTO.getEmail());        body.add("amount", String.valueOf(totalPrice));        assert account != null;        body.add("subaccount", account.getSubaccount_code());        ResponseEntity<Response> response = restTemplate.postForEntity(url, httpEntity, Response.class);        System.out.println(response.getBody());        for(EventTicketResponse eventTicketResponse : eventTicketResponseList){            EventTicket eventTicket = eventTicketRepository.findById(eventTicketResponse.getId())                    .orElseThrow(() -> new EventNotFoundException(eventTicketResponse.getId()));            paymentRepository.save(                     Payment.builder()                            .amount(BigDecimal.valueOf(eventTicketResponse.getQuantity()*eventTicketResponse.getTicketPrice()))                             .purchaseDate(DateUtils.saveDate(LocalDateTime.now()))                            .buyerEmail(paymentDTO.getBuyerEmail())                            .buyerName(paymentDTO.getBuyerName())                            .qty(eventTicketResponse.getQuantity())                            .eventTicket(eventTicket)                             .event(eventTicket.getEvent())                            .build());        }        return "Payment made successfully";    }}