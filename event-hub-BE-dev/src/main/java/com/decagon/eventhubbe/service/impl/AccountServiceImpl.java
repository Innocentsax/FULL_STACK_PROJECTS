package com.decagon.eventhubbe.service.impl;import com.decagon.eventhubbe.domain.entities.Account;import com.decagon.eventhubbe.domain.entities.AppUser;import com.decagon.eventhubbe.domain.entities.Banks;import com.decagon.eventhubbe.domain.repository.AccountRepository;import com.decagon.eventhubbe.domain.repository.BankRepository;import com.decagon.eventhubbe.dto.request.*;import com.decagon.eventhubbe.dto.response.AccountResponse;import com.decagon.eventhubbe.dto.response.BanksRepo;import com.decagon.eventhubbe.exception.AccountIsuesException;import com.decagon.eventhubbe.exception.AccountNotFoundException;import com.decagon.eventhubbe.service.AccountService;import com.decagon.eventhubbe.utils.PaymentUtils;import com.decagon.eventhubbe.utils.UserUtils;import com.fasterxml.jackson.core.type.TypeReference;import com.fasterxml.jackson.databind.ObjectMapper;import lombok.*;import lombok.extern.slf4j.Slf4j;import org.apache.tomcat.util.json.JSONParser;import org.modelmapper.ModelMapper;import org.springframework.boot.ApplicationArguments;import org.springframework.boot.ApplicationRunner;import org.springframework.http.*;import org.springframework.stereotype.Service;import org.springframework.util.LinkedMultiValueMap;import org.springframework.util.MultiValueMap;import org.springframework.web.client.RestTemplate;import org.springframework.web.util.UriComponentsBuilder;import java.net.URI;import java.time.LocalDateTime;import java.util.*;import static com.decagon.eventhubbe.utils.PaymentUtils.getSecretKey;@Slf4j@Service@RequiredArgsConstructorpublic class AccountServiceImpl implements AccountService, ApplicationRunner {    private final BankRepository bankRepository;    private final AppUserServiceImpl appUserService;    private final AccountRepository accountRepository;    private final RestTemplate restTemplate;    private final HttpHeaders headers;    private final ModelMapper modelMapper;    private void details(HttpHeaders headers){        headers.setBearerAuth(getSecretKey());        headers.set("Cache-Control", "no-cache");        headers.setContentType(MediaType.APPLICATION_JSON);    }    @Override    public void run(ApplicationArguments args) throws Exception {        PaymentUtils paymentUtils = new PaymentUtils();        HttpHeaders headers = new HttpHeaders();        details(headers);        RequestEntity<?> requestEntity = new RequestEntity<>(headers, HttpMethod.GET, URI.create(paymentUtils.getBANK_URL()));        ResponseEntity<String> responseEntity = restTemplate.exchange(requestEntity, String.class);        List<BankData> banksResponseList = new ObjectMapper().convertValue(new JSONParser(Objects.requireNonNull(responseEntity.getBody())).object().get("data"), new TypeReference<List<BankData>>() {});        bankRepository.deleteAll();        log.info("BankApi {}", banksResponseList);        if (bankRepository.findAll().isEmpty()) {            banksResponseList.forEach(i -> {                bankRepository.save(new Banks(i.getCode(), i.getName()));            });        }    }    @Override    public RequestAccountDTO saveAccount(RequestAccountDTO requestAccountDTO) {        System.out.println(UserUtils.getUserEmailFromContext());       AppUser user = appUserService.getUserByEmail(UserUtils.getUserEmailFromContext());         Banks banks = bankRepository.findAllByCode(requestAccountDTO.getBankName());        Account account = Account.builder()                .accountName(requestAccountDTO.getAccountName())                .bankName(requestAccountDTO.getBankName())                .accountNumber(requestAccountDTO.getAccountNumber())                .appUser(user)                .build();                SubAccountRequest request = new SubAccountRequest(                "EVENT COMPANY",                banks.getBankCode(),                requestAccountDTO.getAccountNumber(),                "1");        String subaccount_code = subAccount(headers,request).getData().getSubaccount_code();        account.setSubaccount_code(subaccount_code);        return modelMapper.map(accountRepository.save(account),RequestAccountDTO.class);    }    @Override    public List<?> getBankCodeAndSend(String bankName, String accountNumber) {        Banks getCode = bankRepository.findAllByCode(bankName);        log.info("code {}", getCode);        PaymentUtils paymentUtils = new PaymentUtils();        details(headers);        UriComponentsBuilder builder = UriComponentsBuilder                .fromUriString(paymentUtils.getPAY_STACK_URL_RESOLVE())                .queryParam("account_number", accountNumber)                .queryParam("bank_code", getCode.getBankCode())                .queryParam("currency", "NGN");        String url = builder.toUriString();        HttpEntity<?> requestEntity = new HttpEntity<>(headers);        ResponseEntity<Object> responseEntity = restTemplate.exchange(url, HttpMethod.GET, requestEntity, Object.class);        Object responseBody = responseEntity.getBody();        return Collections.singletonList(responseBody);    }    @Override    public  BanksRepo subAccount(HttpHeaders headers, SubAccountRequest request) {        String url = "https://api.paystack.co/subaccount";        MultiValueMap<String, String> body = new LinkedMultiValueMap<>();        body.add("business_name", request.getBusiness_name());        body.add("bank_code", request.getBank_code());        body.add("account_number", request.getAccount_number());        body.add("percentage_charge", request.getPercentage_charge());        details(headers);        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);        HttpEntity<MultiValueMap<String, String>> httpEntity = new HttpEntity<>(body, headers);        ResponseEntity<BanksRepo> response = restTemplate.postForEntity(url, httpEntity, BanksRepo.class);        System.out.println(Objects.requireNonNull(response.getBody()).getMessage());        return response.getBody();    }    @Override    public AccountResponse updateAccount(AccountRequestDTO accountRequestDTO) {        AppUser user = appUserService.getUserByEmail(UserUtils.getUserEmailFromContext());        Account account =getAccountByUser(user);        System.out.println(user.getEmail());        System.out.println(account.getAppUser().getEmail());        details(headers);        String url ="https://api.paystack.co/subaccount/"+account.getSubaccount_code();        Banks banks = bankRepository.findAllByCode(accountRequestDTO.getSettlement_bank());        if(banks==null){            throw new RuntimeException("BANK NOT FOUND");        }        AccountRequest accountRequest = new AccountRequest();        accountRequest.setAccount_number(accountRequestDTO.getAccount_number());        accountRequest.setSettlement_bank(accountRequestDTO.getSettlement_bank());        HttpEntity<AccountRequest> httpEntity = new HttpEntity<>(accountRequest,headers);        ResponseEntity<String> responseEntity = restTemplate.exchange(url, HttpMethod.PUT, httpEntity, String.class);        if (responseEntity.getStatusCode().is2xxSuccessful()) {            account.setAccountName(accountRequestDTO.getAccount_name());            account.setAccountNumber(accountRequest.getAccount_number());            account.setBankName(accountRequest.getSettlement_bank());            accountRepository.save(account);            System.out.println(responseEntity.getBody());            return AccountResponse.builder()                    .object(responseEntity.getBody())                    .messsage("success")                    .localDateTime(LocalDateTime.now())                    .build();    } else {        throw new AccountIsuesException("Failed to update subaccount: " + httpEntity.getBody());    }    }    @Override    public AccountResponse deleteAccount(String subaccountCode) {        AppUser appUser = appUserService.getUserByEmail(UserUtils.getUserEmailFromContext());        Account account = getAccountByUser(appUser);        Account subaccountToDelete = getAccountBySubaccountCode(subaccountCode);        ResponseEntity<Void> delete= deleteSubaccountFromPaystack(subaccountCode);        accountRepository.delete(subaccountToDelete);        return AccountResponse.builder()                .localDateTime(LocalDateTime.now())                .messsage("DELETED")                .object(delete)                .build();    }    private ResponseEntity<Void> deleteSubaccountFromPaystack(String subaccountCode) {        String url = "https://api.paystack.co/subaccount/" + subaccountCode;        headers.setBearerAuth(getSecretKey());        HttpEntity<Void> requestEntity = new HttpEntity<>(headers);        ResponseEntity<Void> responseEntity = restTemplate.exchange(url, HttpMethod.DELETE, requestEntity, Void.class);        if (!responseEntity.getStatusCode().is2xxSuccessful()) {            throw new AccountIsuesException("Failed to delete subaccount");        }        return responseEntity;    }    private Account getAccountBySubaccountCode(String subaccountCode) {        return accountRepository.findBySubaccount_code(subaccountCode)                .orElseThrow(() -> new AccountNotFoundException("SUBACCOUNT NOT FOUND"));    }    private Account getAccountByUser(AppUser appUser) {        return accountRepository.findByAppUser(appUser)                .orElseThrow(() -> new AccountNotFoundException("ACCOUNT NOT FOUND"));    }    @Override    public List<?> getAccountByLogedInUser() {        AppUser appUser = appUserService.getUserByEmail(UserUtils.getUserEmailFromContext());        return Collections.singletonList(accountRepository.findByAppUser(appUser));    }}