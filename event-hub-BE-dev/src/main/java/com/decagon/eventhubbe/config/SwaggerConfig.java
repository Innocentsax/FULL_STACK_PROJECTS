package com.decagon.eventhubbe.config;import io.swagger.v3.oas.models.Components;import io.swagger.v3.oas.models.OpenAPI;import io.swagger.v3.oas.models.info.Info;import io.swagger.v3.oas.models.security.SecurityRequirement;import io.swagger.v3.oas.models.security.SecurityScheme;import org.springdoc.core.models.GroupedOpenApi;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import java.util.Collections;@Configurationpublic class SwaggerConfig {    @Value("v1")    private String version;    @Bean    public OpenAPI api() {        SecurityScheme securityScheme  = new SecurityScheme()                .type(SecurityScheme.Type.HTTP)                .scheme("bearer")                .bearerFormat("JWT");        return new OpenAPI()                .components(new Components()                        .addSecuritySchemes("jwt",securityScheme))                .info(new Info()                        .title("EVENT HUB API IN ")                        .description("Api that provides crud operations for a bank details.")                        .version(version))                .security(Collections.singletonList(new SecurityRequirement().addList("jwt")));    }    @Bean    public GroupedOpenApi bankEndpoint() {        return GroupedOpenApi                .builder()                .group("Banks")                .pathsToMatch("/api/v1/bank/**").build();    }    @Bean    public GroupedOpenApi userEndpoint() {        return GroupedOpenApi                .builder()                .group("Users")                .pathsToMatch("/api/v1/auth/**").build();    }    @Bean    public GroupedOpenApi eventEndpoint() {        return GroupedOpenApi                .builder()                .group("Event")                .pathsToMatch("/events/**").build();    }    @Bean    public GroupedOpenApi paymentEndpoint() {        return GroupedOpenApi                .builder()                .group("Payment")                .pathsToMatch("/api/v1/payment/**").build();    }}