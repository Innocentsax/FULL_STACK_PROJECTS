@page "/shop"
@page "/farm"
@using System.Text;
@using Microsoft.AspNetCore.WebUtilities;
@implements IDisposable
@inject IApiService apiService
@inject IHttpContextAccessor httpContextAssessor
@inject AppState state
@inject ToastService toast
@inject NavigationManager NavManager
<PageTitle>Home</PageTitle>
<section class="section-products">
	<div class="container">
		<div class="row justify-content-center text-center">
			<div class="col-md-8 col-lg-6">
				<div class="header">
					<h3>Featured Product</h3>
					<h2>Popular Products</h2>
				</div>
			</div>
		</div>
		<div class="row">
			@if(Products is null)
			{
				<div class="spinner"></div>
				<p class="text-center">Loading Products ...</p>
			}
			else
			{
				@foreach (var product in Products)
                			{
                				<div class="col-md-6 col-lg-4 col-xl-3">
                					<NavLink href="@GetLink(product)">
                					<div id="product-1" class="single-product">
                						<div class="part-1" style="background:url(@product.PictureUri) no-repeat center">
                							<ul>
                								<li><a href="#" title="Add to Basket" @onclick="()=>AddToCart(product)" ><i class="fas fa-shopping-cart"></i></a></li>
                								<li><NavLink href="@GetLink(product)"><i class="fas fa-eye"></i></NavLink></li>
                							</ul>
                						</div>
                						<div class="part-2">
                							<h3 class="product-title">
                								<NavLink href="@GetLink(product)">@product.Name</NavLink>
                								</h3>
                							@if(product.OldPrice.HasValue){<h4 class="product-old-price">$@product.OldPrice</h4>}
                							
                							<h4 class="product-price">$@product.Price</h4>
                						</div>
                                        </div>
                                        </NavLink>
                				</div>
                			}
			}
			
		
		</div>
	</div>
</section>
@code{
	public IEnumerable<ProductDto> Products { get; set; }
	private Basket Basket = null!;
	string SearchTerm = "";
	public async Task AddToCart(ProductDto product) { 
		var issSuccess=	await apiService.AddToBasket(new BasketItemDto
		{
			ProductId=product.Id,
			Quantity=1,
			UnitPrice=product.Price
		});
		if (issSuccess)
		{

			await InvokeAsync(() =>
			{
				toast.Success($"{product.Name} added to cart!");

				state.OnStateChange += StateHasChanged;

				state.TriggerChange();
			}
			);
		}
	}
	public string GetLink(ProductDto product) => $"/product/{product.Id}";
	protected override async Task OnInitializedAsync()
	{ 
		
		Products = await apiService.GetProducts();
		NavManager.LocationChanged += HandleLocationChanged;
	}
	
	public async void HandleLocationChanged(object sender, LocationChangedEventArgs e)
	{
		var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
		if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("q", out  var q)) 
		{
				Products = await apiService.GetProducts(q);
			StateHasChanged();
		}
		
	}
	public void Dispose()
	{
		state.OnStateChange -= StateHasChanged;
		NavManager.LocationChanged -= HandleLocationChanged;
	}
}